#SpringBoot读取配置文件顺序：
# bootstrap.yml>bootstrap.yaml>bootstrap.properties>nacos的配置>
#application.yml>application.yaml>application.properties

server:
  port: 8764
  servlet:
    context-path: /user-server


spring:
  application:
    name: user-server

  #如果使用Spring Boot 2.1及更高版本时候，
  #需要增加配置spring.main.allow-bean-definition-overriding=true
  main:
    allow-bean-definition-overriding: true

  cloud:
    nacos:
      discovery:
        server-addr: 192.168.190.129:8848
      config:
        server-addr: 192.168.190.129:8848
        file-extension: yml

  redis:
    database: 0
    host: 192.168.190.129
    port: 6379
    password: 123456
    timeout: 6000ms
    lettuce:
      pool:
        max-active: 8
        max-wait: -1ms
        max-idle: 8
        min-idle: 0

  datasource:
    dynamic:
      #设置默认的数据源或者数据源组,默认值即为master
      primary: master
      #严格匹配数据源,默认false. true未匹配到指定数据源时抛异常,false使用默认数据源
      strict: false
      datasource:
        master:
          driver-class-name: com.mysql.cj.jdbc.Driver
          url: jdbc:mysql://127.0.0.1:3306/test_zs?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&useSSL=false&testWhileIdle=false
          username: root
          password: Zs11195310

        slave:
          driver-class-name: com.mysql.cj.jdbc.Driver
          url: jdbc:mysql://127.0.0.1:3306/shiro?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&useSSL=false&testWhileIdle=false
          username: root
          password: Zs11195310

  rabbitmq:
    host: 192.168.190.129
    port: 5672
    username: guest
    password: guest
    virtual-host: /
    ##确认消息已发送到队列(Queue)
    publisher-returns: true
    ###确认消息已发送到交换机(Exchange)
    publisher-confirm-type: correlated
    ##exchange到queue失败,则回调return(需设置mandatory=true,否则不回回调,消息就丢了)
    template:
      mandatory: true
    listener:
      type: simple
      simple:
        #采用手动应答
        acknowledge-mode: manual
        #最小消费者数量
        concurrency: 1
        #最大消费者数量
        max-concurrency: 10
        #重试次数超过上面的设置之后是否丢弃（false不丢弃时需要写相应代码将该消息加入死信队列）
        default-requeue-rejected: false
        #是否支持重试
        retry:
          enabled: true
          #最大重试次数
          max-attempts: 3
          #重试间隔时间(单位毫秒）
          initial-interval: 5000

#rocketmq配置
cloud:
  rocketmq:
    #不能使用name-server
    name-server: 192.168.190.129:9876
    #普通消息配置
    producer:
      group: p-${spring.application.name}

    #消费者配置
    consumer:
      #消费者组名称
      c-user-server:
        subscription:
          # topic : eventCode  最好都大写
          TP_ORDER_SERVER_TOPIC: EC_ORDER_SERVER
          TP_ORDER_SERVER_TOPIC_TRANSACTION: EC_ORDER_SERVER_TRANSACTION
          TP_PAYMENT_SERVER_TOPIC: EC_PAYMENT_SERVER

mybatis-plus:
  mapper-locations: classpath*:mapping/*.xml
  type-aliases-package: com.cloud.common.entity
  type-enums-package: com.cloud.common.enums
  configuration:
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    auto-mapping-behavior: partial
  global-config:
    db-config:
      id-type: auto

###  xxl-job #############################################################
xxl:
  job:
    admin:
      #调度中心部署跟地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。
      #执行器将会使用该地址进行"执行器心跳注册"和"任务结果回调"；为空则关闭自动注册；
      addresses: http://192.168.190.129:19090/xxl-job-admin
    #### 执行器通讯TOKEN [选填]：非空时启用；
    accessToken:
    executor:
      #### 执行器AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册
      appname: user-server-executor
      #### 执行器注册 [选填]：优先使用该配置作为注册地址，为空时使用内嵌服务 ”IP:PORT“ 作为注册地址。
      #### 从而更灵活的支持容器类型执行器动态IP和动态映射端口问题。
      address:
      ###执行器IP [选填]：默认为空表示自动获取IP，多网卡时可手动设置指定IP，
      ###该IP不会绑定Host仅作为通讯实用；地址信息用于 "执行器注册" 和 "调度中心请求并触发任务"；
      ip:
      #### 执行器端口号 [选填]：小于等于0则自动获取；默认端口为9999，
      #### 单机部署多个执行器时，注意要配置不同执行器端口；
      port: 0
      #### 执行器运行日志文件存储磁盘路径 [选填] ：需要对该路径拥有读写权限；为空则使用默认路径；
      logpath: /idea_logs/springcloud_logs/xxl-job/user-server/jobhandler
      #### 执行器日志文件保存天数 [选填] ： 过期日志自动清理, 限制值大于等于3时生效; 否则, 如-1, 关闭自动清理功能；
      logretentiondays: 30


#seata分布式事务配置
seata:
  enabled: true
  application-id: ${spring.application.name}
  ##此处配置自定义的seata事务分组名称
  tx-service-group: ${spring.application.name}-tx-group
  ##开启数据库代理
  enable-auto-data-source-proxy: true
  registry:
    type: nacos
    nacos:
      application: seata-server
      server-addr: 192.168.190.129:8848
      username: nacos
      password: nacos

  config:
    type: nacos
    nacos:
      namespace: fc88974f-ab9e-4adc-b89c-b1a654f3d744
      server-addr: 192.168.190.129:8848
      username: nacos
      password: nacos
      group: SEATA_GROUP


logging:
  level:
    RocketmqClient: error
    RocketmqRemoting: warn

#hystrix的超时时间
hystrix:
  command:
    default:
      execution:
        timeout:
          enabled: true
        isolation:
          thread:
            timeoutInMilliseconds: 20000

feign:
  hystrix:
    enabled: true
  client:
    config:
      default:
        #不设置connectTimeout会导致readTimeout设置不生效
        connectTimeout: 20000
        readTimeout: 20000
