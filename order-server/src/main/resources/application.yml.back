server:
  port: 8763
  servlet:
    context-path: /order-server

spring:
  application:
    name: order-server

  profiles:
    active: dev

  cloud:
    nacos:
      discovery:
        server-addr: 139.196.208.53:8848
        username: nacos
        password: nacos

  servlet:
    multipart:
      enabled: true
      max-file-size: 150MB
      max-request-size: 200MB

  #如果使用Spring Boot 2.1及更高版本时候，
  #需要增加配置spring.main.allow-bean-definition-overriding=true
  main:
    allow-bean-definition-overriding: true


  #elasticsearch配置
  elasticsearch:
    rest:
      uris: http://139.196.208.53:9200

  #mongodb配置
  data:
    mongodb:
      uri: mongodb://139.196.208.53:27017/mongoTest

  #redis配置
  redis:
    database: 0
    host: 139.196.208.53
    port: 6379
    password: Zs11195310
    timeout: 6000ms
    lettuce:
      pool:
        max-active: 8
        max-wait: -1ms
        max-idle: 8
        min-idle: 0


  datasource:
    dynamic:
      # 开启seata代理，开启后默认每个数据源都代理，如果某个不需要代理可单独关闭
      seata: true
      # 默认AT模式，支持  AT 、XA
      seata-mode: at
      #设置默认的数据源或者数据源组,默认值即为master
      primary: master
      #严格匹配数据源,默认false. true未匹配到指定数据源时抛异常,false使用默认数据源
      strict: false
      datasource:
        master:
          driver-class-name: com.mysql.cj.jdbc.Driver
          url: jdbc:mysql://139.196.208.53:3306/order?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&useSSL=false&testWhileIdle=false
          username: root
          password: Zs11195310

#        slave:
#          driver-class-name: com.mysql.cj.jdbc.Driver
#          url: jdbc:mysql://139.196.208.53:3306/shiro?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&useSSL=false&testWhileIdle=false
#          username: root
#          password: Zs11195310

#rocketmq配置
cloud:
  web:
    #开启全局异常捕获
    globalExceptionHandler:
      enabled: true
    enableLogWithUUID: true
    swagger:
      basePackage: com.cloud.order.controller

    #redisson配置
    redisson:
      enabled: true
      nodes: 139.196.208.53:6379
      password: 123456
      timeout: 3000
      scanInterval: 1000
      connectionPoolSize: 64
      connectionMinimumIdleSize: 10
      pingConnectionInterval: 1000

  rocketmq:
    name-server: 139.196.208.53:9876
    producer:
      #生产者组名称
      group-name: p-${spring.application.name}
      #生产者是否开启消息轨迹
      enableMsgTrace: true
    consumer:
      #消费者组名称
      group-name: c-${spring.application.name}
      #消费者是否开启消息轨迹
      enableMsgTrace: true

  #定时任务配置
  time-based-job:
    enabled: true
    thread-pool-size: 20
    discardTaskSeconds: 300

mybatis-plus:
  mapper-locations: classpath*:mapping/*.xml
  type-aliases-package: com.cloud.order.domain.entity
  type-enums-package: com.cloud.order.enums
  configuration:
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    auto-mapping-behavior: partial
  global-config:
    db-config:
      id-type: auto
      ## 全局逻辑删除的实体字段名
      logic-delete-field: isDeleted
      ## 逻辑已删除值(默认为 1)
      logic-delete-value: 1
      ## 逻辑未删除值(默认为 0)
      logic-not-delete-value: 0


#seata分布式事务配置
seata:
  ##spring.datasource.dynami.seata需要同时开启
  enabled: true
  application-id: ${spring.application.name}
  ##此处配置自定义的seata事务分组名称
  tx-service-group: ${spring.application.name}-tx-group
  ##关闭自动代理
  enable-auto-data-source-proxy: false
  registry:
    type: nacos
    nacos:
      application: seata-server
      server-addr: 139.196.208.53:8848
      username: nacos
      password: nacos

  config:
    type: nacos
    nacos:
      server-addr: 139.196.208.53:8848
      username: nacos
      password: nacos
      group: SEATA_GROUP
      data-id: seataClient.properties

#minio配置
min:
  io:
    endpoint: http://139.196.208.53:9001
    accessKey: admin
    secretKey: zs19921119

management:
  endpoints:
    web:
      exposure:
        include: "*"

#Rocketmq日志级别
logging:
  level:
    RocketmqClient: error
    RocketmqRemoting: warn

#hystrix的超时时间
hystrix:
  command:
    default:
      execution:
        timeout:
          enabled: true
        isolation:
          thread:
            timeoutInMilliseconds: 5000

feign:
  hystrix:
    enabled: true
  client:
    config:
      default: #设置全局超时时间
        connectTimeout: 2000  #请求连接的超时时间
        readTimeout: 5000     #请求处理的超时时间


